
import 'reflect-metadata';
import { Field } from "./Field";

/**
 * The entity which holds all the metadata for each model automatically generated by using the @Entity Decorator
 */
export class Entity {

    tableName: string; // TableName for the entity
    tableType: new() => Object; // Type of the entity
    fields: Field[]; // all fields (excluding Primary Keys and foreign keys)
    foreignKeys : Field[]; // all foreign keys
    primaryKeys : Field[]; // all primary keys
    onetonArray : Field[]; // all 1 to N Fields
    mtonArray : Field[]; // M to N Fields

    constructor(table: new() => Object) {
        this.tableName = table.name;
        this.tableType = table;
        this.fields = [];

        this.primaryKeys = [];
        this.foreignKeys = [];
        this.onetonArray = [];
        this.mtonArray = [];
        let instance: any = new table();

        const fields: string[] = Reflect.getMetadata("fields", instance);

        fields.forEach(field => {
            let fieldInfo = Reflect.getMetadata("field", instance, field);

            // add the keys to their respective array
            if (fieldInfo === "pk") {
                this.primaryKeys.push(new Field(field, Reflect.getMetadata("design:type", instance, field)));
            } else if (fieldInfo === "fk" ) {
                this.foreignKeys.push(new Field(field, Reflect.getMetadata("design:type", instance, field)));
            } else if (fieldInfo === "MtoN" ) {
                this.mtonArray.push(new Field(field, Reflect.getMetadata("design:type", instance, field)));
            } else if (fieldInfo === "1toN" ) {
                this.onetonArray.push(new Field(field, Reflect.getMetadata("design:type", instance, field)));
            } else {
                this.fields.push(new Field(field, Reflect.getMetadata("design:type", instance, field)));
            }
        });
    }

    getAllFields() {
        return this.fields.concat(this.primaryKeys).concat(this.foreignKeys);
    }

    getAllExceptForeign() {
        return this.fields.concat(this.primaryKeys);
    }
    
}